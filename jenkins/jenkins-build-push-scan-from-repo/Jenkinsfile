pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
metadata:
    name: inline-scan-worker
spec:
    containers:
      - name: jnlp
      - name: maven
        image: maven:3.6-jdk-11
        command: ['cat']
        tty: true
      - name: builder
        image: gcr.io/kaniko-project/executor:debug
        command: ['cat']
        tty: true
      - name: inline-scan
        image: quay.io/sysdig/secure-inline-scan:2
        command: ['cat']
        tty: true
"""
       }
   }

    parameters {
        string(name: 'IMAGE_NAME', defaultValue: 'docker.io/sysdiglabs/test-maven-app', description: 'Name of the image to be built andscanned (e.g.: myrepo/dummy-app)')
    }

    environment {
        DOCKER = credentials('docker-repository-credentials')
        SECURE_API_KEY = credentials('sysdig-secure-api-credentials')
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/openshift/test-maven-app'
            }
        }
        stage('Build app') {
            steps {
                container("maven") {
                    sh "mvn package"
                }
            }
        }
        stage('Build image and push') {
            steps {
                container("builder") {
                    sh """cat > config.json <<EOF
{
	"auths": {
		"https://index.docker.io/v1/": {
			"auth": "\$(echo -n \${DOCKER} | base64)"
		}
	}
}
EOF
                    """
                    sh "cat config.json"
                    sh """cat > Dockerfile <<EOF
FROM gcr.io/distroless/java:11
COPY target/hello.jar /hello.jar
CMD /hello.jar
EOF
                    """
                    sh "/kaniko/executor --context . --verbosity debug --destination ${IMAGE_NAME}"

                }
            }
        }
        stage('Scanning Image pulled from repository') {
            steps {
                container("inline-scan") {
                    sh "/sysdig-inline-scan.sh -k ${SECURE_API_KEY_PSW} ${IMAGE_NAME}"
                }
            }
        }
   }
}